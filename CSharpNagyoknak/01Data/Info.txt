<Kis kitérő: Git/Github>
Kódtár [Github (Git)] --(Clone)--> Kódtár [Saját gép] ----------> Munkakönyvtár (Working Directory)

                                   Változások         <-(commit)- Változások
                                                      <-(commit)- Változások
                                                      <-(commit)- Változások
                                                      <-(commit)- Változások
Változás              <-(Push)--- 
</Kis kitérő: Git/Github>

0. Lépés
A feladatunk, hogy egy todo alkalmazást készítsünk, legalábbis a back-endjét, adatbázissal és kiszolgáló webapi-val.

1. Lépés: adatbázis hozzáférés választása
EntityFramework Code First (Migrations) https://github.com/aspnet/EntityFramework6

EntityFramework: ORM (Object Relational Mapper)
Code First 

Data first (DB First):
DB ---> (Model --->) DbContext (Az adatokhoz való hozzáférést segítő osztálykörnyezetet)
(Amennyiben egy meglévő fejlesztésben szeretnénk használni a Code First előnyeit, át kell álln unk a Code First használatára.
Szerencsére van erre mód, erre ad megoldást ez a válasz: 
https://stackoverflow.com/questions/15268036/edmx-for-legacy-code-and-code-first-for-new-development-together-in-one-mvc-pr)

Model first:
DB <--- Model --->   DbContext

Code First:
DB <--- (Model <---) DbContext

a. Ez az egész borzasztó egyszerűen használható!
b. a .NET Core hoz fejlesztett EntityFramework Core csak a Code First Migrations-t támogatja

2. Lépés: adatbázis létrehozása

3. Lépés: adatbázis integrációs teszt
a.) A tesztek sorrendjében nem érdemes bízni (atomic teszteket kell írni)
b.) A tesztnek ismételhetőnek kell lennie (A tesztnek pontosan úgy kell elhagynia a helyszínt, ahogy oda érkezett.)

4. Lépés: Adatbázis módosítása
Ha az adatbázis struktúrán módosítani kell, akkor: Code First Migrations
Az adatbázis a leginkább "módosításellenálló" része egy projektnek. hagyományos eszközökkel.

Ezért jön a képbe a Code First Migrations

4.0: Bekapcsolás

Package Manager Console:
(Azon a projekten, ahol a DbContext is van)
PM> Enable-Migrations

Checking if the context targets an existing database...
Detected database created with a database initializer. Scaffolded migration '201706200804228_InitialCreate' corresponding to existing database. To use an automatic migration instead, delete the Migrations folder and re-run Enable-Migrations specifying the -EnableAutomaticMigrations parameter.
Code First Migrations enabled for project 01Data.

4.1: Migrációs lépés létrehozása:

4.2: Migrációs lépés visszavonása:

PM> update-database -TargetMigration

Ha teljesen mindent vissza akarok vonni, akkor:
PM> update-database -TargetMigration 0

4.3: Minden migrációs lépés telepítése az adatbázisban:
PM> update-database

4.4: Ha nem telepíteni akarom, hanem megnézni az SQL scriptet, akkor:
PM> update-database -script

további információk: 
http://www.entityframeworktutorial.net/code-first/entity-framework-code-first.aspx
https://coding.abel.nu/2012/02/using-entity-framework-to-create-a-database/
https://blog.oneunicorn.com/category/entity-framework/code-first/

Alapértelmezett érték megadása Code First Migrations mezőnél:

https://stackoverflow.com/a/31026023/208922
https://stackoverflow.com/a/27920032/208922

5. Adatok

5.1: Seed: a migrációk után, minden update-database végrehajtásakor lefut.

Fontos: Ha változik a séma, akkor a Seed lehet, hogy nem fut le!!!
Ezért:
Ha a seed-ben gyártjuk a kezdőadatokat, akkor azt folyamatosan karban kell tartani. (SEED)

Vagy, az egyes adatfeltöltéseket a migrációs lépésben hajtjuk végre. (MIGR)

Előnyök:
  Seed: 
	szigorúan típusos, 
	használhatjuk a C# lehetőségeit
	egy helyen van valamennyi adatfeltöltés
	kiszervezhető
	utólag könyebben
  migr: 
	együtt mozog az adatbázis sémával, 
	ha változik a séma (migráción keresztül) az adatfeltöltést nem érinti,
	tudjuk írni az identity mezőket is (még akkor is, ha nem egyszerű)

Hátrányok:
  Seed: 
	ha változik az adatbázis séma, akkor mindig hozzá kell igazítani
    nehéz hibát keresni benne
  Migr:
    sok helyen szétszórva írjuk az adatainkat
	nem típusos (SQL utasítást adunk át szövegként, futásidőben derül ki, hogy jó-e)    

6. Adatbázis létrehozása
6.1: Update database (Migrations)
     meglévő, különböző állapotú és adatokat tartalmazó adatbézisoknál haszálható jól

6.2  DropAndCreate
     tesztadatbázisoknál jól használható

A konfigurációt az induló (startup) projekt adja. Így, ha teszt konfigurációmat a 
teszt projektbe írom, annak semmilyen hatása nem lesz a többi projekt 
(pl. az eredeti Data projekt) konfigurációjára, és fordítva.

Megvan az a nagyon fontos előnye, hogy mindig pontosan ugyanúgy jön létre, így 
tudok az adatbázisom azonosítóira hivatkozni, rögzítve vannak.
Ha az adatbázis séma (tehát az adatmodell a migrációs lépésekben) 
és a seed nem változik, akkor az azonosítók sem változnak.

6.3 Adatbázis elérésének és nevének paraméterezése
    A DbContext konstruktorának segítségével az app/web.config-ból

7. Migrációs lépések futtatása parancssorból (migrate.exe)
   https://msdn.microsoft.com/en-us/library/jj618307(v=vs.113).aspx

   a migrate.exe az EntityFramework nuget csomaggal érkezik, és a 
    CSharpNagyoknak\packages\EntityFramework.6.1.3\tools könyvtárban található.
	Sajnos, nem sikerült rávenni, hogy innen futtatható legyen, ezért a megoldás, 
	hogy a migrációs lépéseket tartalmazó assembly (jelen esetben a 01Data.exe) mellé
	másoljuk (ha Debug buildünk van, akkor: CSharpNagyoknak\01Data\bin\Debug könyvtár),  
	ezt például úgy is megoldhatjuk, ha a migrate.exe-t felvesszük a projektbe mint Content és 
	Copy to oputput Directory beállítást átállítjuk "Copy if newer" értékre.
	Fontos, hogy a projekt gyökérkönyvtárába vegyük fel, így a Build az exe és a dll-ek mellé teszi.

	Ezt követően a 01Data.exe könyvtárban ezzel a paranccsal futtathatók a migrációs lépések:

	Mindent feltelepít:
	CSharpNagyoknak\01Data\bin\Debug>migrate 01Data.exe /startupConfigurationFile:01Data.exe.config /verbose
	
	Mindent visszavon:
	CSharpNagyoknak\01Data\bin\Debug>migrate 01Data.exe /startupConfigurationFile:01Data.exe.config /targetMigration:0 /verbose

	Telepít egy meghatározott lépésig:
	CSharpNagyoknak\01Data\bin\Debug>migrate 01Data.exe /startupConfigurationFile:01Data.exe.config /targetMigration:"201706201130303_Add Severity.Created column" /verbose

8. Nunit és repository minta

   https://www.nunit.org/
   https://github.com/nunit/nunit

8.1. Konkrét Repository minta

   a karbantarthatóság érdekében az általános objektumorientált fejlesztés elveit érdemes használni (design patterns-tervezési minták)
   a tervezési minták használata mindig jelentősen több munkával jár

   (Adatbázis) <=========> (Entity Framework) <==========> (Alkalmazás)
                                 (DAL)

   Csatolás: ha egy objektum változásakor NEM KIZÁRHATÓ, hogy a hozzá kapcsolódó objektumon IS változtatni kell, 
   akkor a két objektum között csatolás van.

   (Adatbázis) <=========> (Entity Framework) <==========> (Alkalmazás)
                                 (DAL)
             (erős csatolás)                 (erős csatolás)


   Két objektum közötti erős csatolást (például) indirekcióval tudunk eltüntetni.

   (Adatbázis) <=========> (Entity Framework) <==========> (Repository) <==========> (Alkalmazás)
                                 (DAL)
             (erős csatolás)                 (erős csatolás)            (erős csatolás)

			                                  <----------(Gyenge csatolás)--------->

  Feladatok:
     a.) beburkolni az Entity Framework-öt (01Data), és saját osztállyal kiváltani
	 b.) lecserélni valamennyi típust, amit az EF használ, és saját osztállyal kiváltani
	     ez valójában modell adatok utaztatását jelenti, erre a DTO (Data Transfer Object)
		 fogalom lesz a segítségünkre.
		 https://martinfowler.com/eaaCatalog/dataTransferObject.html

     tehát nem csak a műveleteket kell beburkolnunk, hanem az adatokat is.

	 A DTO-k használatával ki lehet váltani a hosszú függvénylistákat, és 
	 ha változik a paraméter akkor elég egy helyen a DTO osztályomat vátoztatni,
	 egyből minden függvényreferenciára hat

	 A repository törlésnél kérdés, hogy az Entity Framework konkurens modósítási 
	 mechanizmusából mit tudunk használni. És a válasz az, hogy mivel az eredeti model-t leváltottuk DTO-ra, 
	 így nem tudunk belőle semmit felhasználni.

     c.) Az adatok mozgatása mennyiségi kérdéssé vált, meg kéne oldani, hogy két majdnem azonos struktúrájú
	     osztálypéldány között az értékeket átmásoljuk a property nevek alapján.

		 A probléma az, hogy az adatokat tartalmazó osztályok és a mozgató mechanizmus között
		 ERŐS CSATOLÁS jött létre. Ehhez valahogy egy indirekció jelentené a megoldást. (AutoMapper)

		 tehát előnyök: 
		 c1) az adatkonverziókat kiemeljük a kódból, és együtt, egy helyen tároljuk (Profile)
		 c2) ha változik valamelyik adatstruktúra, a konverziót használó kódot (Mapper.Map()) kódot nem kell módosítani, 
		 csak a profile-ban módosítani.
		 c3) tesztelhetővé teszi a konverziós definíciót
		 c4) bonyolult konverziót is lehet vele modellezni

		 Működése

		 TodoItem                      TodoItemDTO
		 -----------------------------------------
		 Id                            Id
         Title                         Title
         IsDone                        IsDone	
         Opened                        Opened
         Closed                        Closed
		 SeverityId                    SeverityId
		 Severity


		 Figyelem: Entity Framework függőségek
		 -------------------------------------
		 Repository (Kell az adateléréshez) -> Entity Framework referencia
		 Repository (Kell az adateléréshez) -> 01Data assembly referencia (TodoContext)
		 Entity Framwork beállítások betöltése App.Config-ból (Induló projekt)-> EntityFramework referencia (nuget)
		 Tesztadatok generálása (Teszt projekt) -> 01Data assembly referencia (TodoContext)

8.2. Általános repository minta

	Feladatok:
	a.) meg kell oldani az adatmodell<-> dto transzformációt (AutoMapper: http://automapper.org/, előző bekezdés c.) pont) 
	b.) készítsünk általános repository-t, amit más táblákra is fel tudunk használni

	navigációs property-khez adalék: https://github.com/AutoMapper/AutoMapper.EF6


9. Specflow

   http://devportal.hu/bevezetes-a-viselkedesalapu-szoftverfejlesztesbe-bdd-es-a-specflow-hasznalataba/

   http://specflow.org/
   https://github.com/techtalk/SpecFlow

   http://behaviourdriven.org/
   http://www.martinfowler.com/bliki/BusinessReadableDSL.html
   https://github.com/cucumber/cucumber/wiki/Gherkin

   konfiguráció: http://go.specflow.org/doc-config

10. Repository és az EntityFramework szolgáltatásai
	navigációs property-k
	keresés és szűrés és sorbarendezés LINQ-val

11. Szemétgyűjtő (Garbage Collector, GC) és következményei

	Változótípusok:
	Értéktípus: int, float, ... bool, (STACK), 
		Hátrány: ehhez tudnom kell a tárolás méretét, tehát csak ismert hossz kerülhet bele. 
		Előny: Csak egy veremmutatót kell átállítani az adminisztrációhoz. Általában gyorsabb is mint a HEAP. 
	Referenciatípus: minden más, gyakorlatilag ami osztálypéldány (HEAP), nem tudom a méretet előre
		Előny: (elméletileg) bármilyen méret kerülhet bele
		Hátrány: adminisztrálni kell

    a. Nyilván kell tartani, hogy hol van foglalt és hol nem foglalt a memória
	b. le kell foglalni az új elem helyét
	c. Ha valamire nincs szükség fel kell szabadítani
	d. Időről időre tömöríteni kell

	A menedzselt nyelveknél a HEAP kezelését a GC végzi.
    
	Memória típusok

	| STACK (Verem) |                    | HEAP (Halom)     |
	-----------------                    --------------------
	|  (mutató) ----|--------------------|>(osztálypéldány) |
	|               |                    |                  |
	| (int)         |                    | [...][......][...|
	|---------------|                    |...]        [..]  |
	| [main()xxxxxx |                    |          [.....] |
	| xxxxxxxx]     |                    |                ^ |
	|         ^     |                    |                | |
              |                                           |
			  |                                           |
	           Veremmutató                                Heap végét mutató

    A HEAP és a GC működése:

	Ezt az egész adminisztrációt egy folyamatban végzi.

	0. a GC minden elemet szemétnek jelöl
	1. Felderíti a root elemeket. Ehhez
	   a.) az érvényben lévő változók szerepelnek a STACK memóriában
	   b.) statikus változók
	   c.) + néhány speciális verem, amit GC használ (pl.: finalizer queue)

	2. A root elemkből elindulva felderíti az elérhető változók fáját
	3. Az elérhető elemeket megjelöli, hogy élők
	4. Egy lépésben az összes szemétnek jelőlt helyet felszabadítja, 
	   ÉS 
	   hézagmentesen tömöríti a HEAP-et. Ez azt is jelenti, hogy 
	   valamennyi referenciát frissíti

   Ez az algoritmus kiválóan működik akkor, ha nincs az objektumnak saját élettartammal 
   rendelkező függősége. (nyitott hálózati kapcsolat, nyitott állomány, nagy méretű memóriafoglalás)
   Tehát amíg nem kell takarítani az adott objektumpéldány után.

   Erre szolgál az objektum véglegesítője (Finalizer).
   Ezt az alábbi módon kezeli az operációs rendszer (változások az algoritmusban, kiegészítés):

   3. Azokat az objektumokat, amiknek véglegesítője van, átteszi egy Finalizer Queue-ba (szintén root)
      bár nincs rájuk hivatkozás a kódból, mégis elérhetők root elemként, így nem lesznek kitakarítva.
 
   5. Valamikor, egy teljesen más szálon, egyszercsak, meghatározhatatlan idő után, a futtatókörnyezet
      végigmegy a finalizer queue-n és lefuttatja a rajta lévő objektumok véglegesítőit és törli őket a Queue-ból.

   És a következő Garbage Collect ciklusban így már nem mutat rájuk referencia a root objektumokból, ezért a GC 
   kitakarítja őket.

   Tehát a legfontosabb gondolat: a véglegesítővel ellátott objektumoknak KÉT SZEMÉTGYŰJTŐ ciklus kell ahhoz, hogy
   a memóriából eltűnjenek.

   DE EZ CSAK A B-TERVE a futtatókörnyezetnek. (védőháló, a legvégső esetre) 

   Példa: a Bitmap osztálynak van véglegesítője, és eltömi a memóriát, ha hagyjuk, hogy a futtatókörnyezet meghívja.
   Ellenpélda: string osztály, nincs véglegesítője, megdolgoztatja a GC-t, de nem tömi el a memóriát.

   Tehát a következtetés: _kerüljük a véglegesítő használatát_. (Egyébként kerüljük el, ha tudjuk a nagy mennyiságű és meretű 
   osztálypéldányok létrehozását, mert a HEAP karbantartása mindenképpen viszi a teljesítményt.)

   Hogy tudjuk elkerülni? IDisposable minta.

12. Repository Unit tesztelés (Dependency Injection és Mock)
    A Unit teszteléshez arra van szükség, hogy ne integrációs tesztet írjunk, vagyis csak a repository osztályt szeretnénk tesztelni.

	Ahhoz, hogy Unit teszteljük, nem lehetnek beágyazott függőségei (var db=new TodoContext())
	A beágyazott függőség elkerüléséhez a bejáratott út a Dependency Injection (DI), vagyis a függőséget kívülről 
	küldöm az osztályba.
	Vagyis, a függőségek példányosítása a hívó fél feladata
	
	Miután megvagyunk a paramétere konstruktor és a köré épített rendszerrel, kérdés, hogy mivel tudjuk
	unit tesztelni a programunkat?

	szükségünk van egy olyan példányra, ami tökre olyan, mint a TodoContext, de csak azt tudja, ami a Unit teszteléshez kell.
	   
	a.) leszármaztathatnánk a TodoContext-et (Fake), és ha jól előkészítjük, akkor a unit tesztre tudna válaszolni.
	b.) készíthetnénk egy felületet (ITodoContext), ami tartalmazza a lényeget a TodoContext-ből és azt implementálnánk a todoContext-ben és a 
	    fake-ben is, és ha ezt a felületet várjuk a repo-ban, akkor a Fake-et is be tudjuk küldeni.

	c.) Keresünk egy dublőrt, aki eljátssza, hogy ő a TodoContext. Erre szolgál a Mock keretrendszer (Moq nuget csomag).
	    https://github.com/moq/moq4
		doksi: https://github.com/Moq/moq4/wiki/Quickstart

		A szerzője felrakott pár videót az általa készített Funq (DI Container) felépítéséről.
		http://blogs.clariusconsulting.net/kzu/funq-screencast-series-on-how-to-building-a-di-container-using-tdd/


13. Reflexió (Reflection)
    Bármi lekérdezhető egy assembly felületéről

14. Attributumok használata
    Metaadatok:
		Önállóan nem használt, osztályok, amik egyes más osztályokról tartalmaznak információkat. Gyakorlatilag az osztálydefiníció része
		   arra vannak, hogy a működést befolyásolják.
		Tartozhatnak Osztályhoz, Property-hez, Mezőhöz, metódushoz.

	Vagyis: három részből áll az attributum "domain"
	1. Attributum definíció (Ez megmondja, hogy mit jelent egy-egy dekoráció)
	2. Attributum használat (Dekoráljuk az osztályt, függvényt, property-t)
	3. Attributum működés (a környezet figyeli az attributumokat, és annak megfelelően módosítja a viselkedést.)

15. BenchmarkDotnet
	https://github.com/dotnet/BenchmarkDotNet
	http://benchmarkdotnet.org/

	Release fordításból kell futtatni közvetlenül az exe-t.

	A .NET fejlesztő teljesítménykritériumai: https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/performance-guidelines.md#creating-a-microbenchmark
	Egyszerű példák: http://mattwarren.org/2016/02/17/adventures-in-benchmarking-memory-allocations/

16. GC teljesítmény

    A GC mindig le fog futni. Problémák:

	a.) ha túl sok osztálypéldányt hozunk létre, akkor gyorsan telítődik a HEAP, így a GC-nek sűrűbben kell futnia.
	b.) ha nem használjuk az IDisposable felülettel rendelkező osztályokon a Dispose()-t, akkor a finalizer-nek kell takarítania.
	    ilyenkor kért GC ciklus kell a takarításhoz.
	c.) ráadásul, ilyenkor, ha a takarítás lassabb, mint a létrehozás, biztosan elfogy a memória.


	|         |
	|         |
	|         |
	|         |
	|         |
	-----------

	Három folyamat van: létrehozás a takarítás és a törlés. Ha a takarítás és törlés a folyamtunk része, akkor kalkulálható, 
	lehet vele számolni, ha baj van vele, akkor ezonnal szembetűnik. Ehhez használni kell a Dispose-t.
	Ha ez két folyamat, akkor egyrészt az időzítése is elszállhat, vagyis gyorsabban hozunk létre, mint ahogy takarítunk.
	másrészt, rejtve marad a takarítás, a rá fordított idő, mivel a finalizer queue ürítése végzi egy harmadik szálon.

	A GC korosít: az egyes példányok kora: hány GC takarítást éltek túl.

	Amin még nem futott a GC az tehát a 0. korosztály
	amin egyszer futott az 1. korosztály
	és amin kétszer futott, az a 2. korosztály

	Ellenőrző programok:
	Process Explorer
	https://technet.microsoft.com/en-us/sysinternals/processexplorer.aspx
	A .NET Performance fülön megtaláljuk a GC futások számát. Ha ez folyamatosan nő, akkor az probléma.
	Különösen a Gen1 és a Gen2 szám fontos, ha ezek is nőnek, akkor biztosan van valami teljesítményprobléma a kóddal.


	https://github.com/Microsoft/perfview
	Részletes információ a program futásáról